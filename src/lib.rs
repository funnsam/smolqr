#![feature(array_chunks)]
#![feature(iter_array_chunks)]

pub mod encode;

struct BitsWriter {
    pub bits: Vec<u8>,
    pub last_length: u8,
}

impl BitsWriter {
    pub fn new() -> Self {
        Self { bits: vec![0], last_length: 0 }
    }

    pub fn len(&self) -> usize {
        self.bits.len() * 8 - 8 + self.last_length as usize
    }

    pub fn write_bit(&mut self, b: bool) {
        *self.bits.last_mut().unwrap() |= (b as u8) << (7 - self.last_length);
        self.last_length += 1;

        if self.last_length >= 8 {
            self.bits.push(0);
            self.last_length = 0;
        }
    }

    pub fn write_bits(&mut self, l: usize, u: usize) {
        for i in 0..l {
            self.write_bit(u & (1 << (l - i - 1)) != 0);
        }
    }

    pub fn write_u8_aligned(&mut self, u: u8) {
        assert_eq!(self.last_length, 0);
        *self.bits.last_mut().unwrap() = u;
        self.bits.push(0);
    }

    pub fn dump(&self) {
        for b in self.bits.iter() {
            print!("{b:08b} ");
        }
        println!();
    }

    pub fn align(&mut self) {
        if self.last_length != 0 {
            self.bits.push(0);
            self.last_length = 0;
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Mode {
    Numeric,
    Alphanumeric,
    Bytes,
    Kanji,
}

impl Mode {
    pub fn indicator(self) -> u8 {
        match self {
            Self::Numeric => 0b0001,
            Self::Alphanumeric => 0b0010,
            Self::Bytes => 0b0100,
            Self::Kanji => 0b1000,
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum ErrorCorrectLv {
    L, M, Q, H
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub struct Version(u8);

impl Version {
    pub fn new(v: u8) -> Self {
        assert!((1..=40).contains(&v));
        Self(v - 1)
    }

    pub fn version(self) -> u8 {
        self.0 + 1
    }

    pub fn smallest_version(chars: usize, ec: ErrorCorrectLv, mode: Mode) -> Option<Self> {
        for v in 0..40 {
            if VERSION_LIMITS[v * 4 + ec as usize][mode as usize] >= chars {
                return Some(Self(v as _));
            }
        }

        None
    }

    pub fn char_count_length(self, mode: Mode) -> usize {
        match self.version() {
            1..=9 => match mode {
                Mode::Numeric => 10,
                Mode::Alphanumeric => 9,
                Mode::Bytes => 8,
                Mode::Kanji => 8,
            },
            10..=26 => match mode {
                Mode::Numeric => 12,
                Mode::Alphanumeric => 11,
                Mode::Bytes => 16,
                Mode::Kanji => 10,
            },
            27..=40 => match mode {
                Mode::Numeric => 14,
                Mode::Alphanumeric => 13,
                Mode::Bytes => 16,
                Mode::Kanji => 12,
            },
            _ => unreachable!()
        }
    }

    pub fn max_data_bytes(self, ec: ErrorCorrectLv) -> usize {
        VERSION_BYTES[self.0 as usize * 4 + ec as usize][0]
    }
}

static VERSION_LIMITS: [[usize; 4]; 40 * 4] = [
    [41, 25, 17, 10],
    [34, 20, 14, 8],
    [27, 16, 11, 7],
    [17, 10, 7, 4],
    [77, 47, 32, 20],
    [63, 38, 26, 16],
    [48, 29, 20, 12],
    [34, 20, 14, 8],
    [127, 77, 53, 32],
    [101, 61, 42, 26],
    [77, 47, 32, 20],
    [58, 35, 24, 15],
    [187, 114, 78, 48],
    [149, 90, 62, 38],
    [111, 67, 46, 28],
    [82, 50, 34, 21],
    [255, 154, 106, 65],
    [202, 122, 84, 52],
    [144, 87, 60, 37],
    [106, 64, 44, 27],
    [322, 195, 134, 82],
    [255, 154, 106, 65],
    [178, 108, 74, 45],
    [139, 84, 58, 36],
    [370, 224, 154, 95],
    [293, 178, 122, 75],
    [207, 125, 86, 53],
    [154, 93, 64, 39],
    [461, 279, 192, 118],
    [365, 221, 152, 93],
    [259, 157, 108, 66],
    [202, 122, 84, 52],
    [552, 335, 230, 141],
    [432, 262, 180, 111],
    [312, 189, 130, 80],
    [235, 143, 98, 60],
    [652, 395, 271, 167],
    [513, 311, 213, 131],
    [364, 221, 151, 93],
    [288, 174, 119, 74],
    [772, 468, 321, 198],
    [604, 366, 251, 155],
    [427, 259, 177, 109],
    [331, 200, 137, 85],
    [883, 535, 367, 226],
    [691, 419, 287, 177],
    [489, 296, 203, 125],
    [374, 227, 155, 96],
    [1022, 619, 425, 262],
    [796, 483, 331, 204],
    [580, 352, 241, 149],
    [427, 259, 177, 109],
    [1101, 667, 458, 282],
    [871, 528, 362, 223],
    [621, 376, 258, 159],
    [468, 283, 194, 120],
    [1250, 758, 520, 320],
    [991, 600, 412, 254],
    [703, 426, 292, 180],
    [530, 321, 220, 136],
    [1408, 854, 586, 361],
    [1082, 656, 450, 277],
    [775, 470, 322, 198],
    [602, 365, 250, 154],
    [1548, 938, 644, 397],
    [1212, 734, 504, 310],
    [876, 531, 364, 224],
    [674, 408, 280, 173],
    [1725, 1046, 718, 442],
    [1346, 816, 560, 345],
    [948, 574, 394, 243],
    [746, 452, 310, 191],
    [1903, 1153, 792, 488],
    [1500, 909, 624, 384],
    [1063, 644, 442, 272],
    [813, 493, 338, 208],
    [2061, 1249, 858, 528],
    [1600, 970, 666, 410],
    [1159, 702, 482, 297],
    [919, 557, 382, 235],
    [2232, 1352, 929, 572],
    [1708, 1035, 711, 438],
    [1224, 742, 509, 314],
    [969, 587, 403, 248],
    [2409, 1460, 1003, 618],
    [1872, 1134, 779, 480],
    [1358, 823, 565, 348],
    [1056, 640, 439, 270],
    [2620, 1588, 1091, 672],
    [2059, 1248, 857, 528],
    [1468, 890, 611, 376],
    [1108, 672, 461, 284],
    [2812, 1704, 1171, 721],
    [2188, 1326, 911, 561],
    [1588, 963, 661, 407],
    [1228, 744, 511, 315],
    [3057, 1853, 1273, 784],
    [2395, 1451, 997, 614],
    [1718, 1041, 715, 440],
    [1286, 779, 535, 330],
    [3283, 1990, 1367, 842],
    [2544, 1542, 1059, 652],
    [1804, 1094, 751, 462],
    [1425, 864, 593, 365],
    [3517, 2132, 1465, 902],
    [2701, 1637, 1125, 692],
    [1933, 1172, 805, 496],
    [1501, 910, 625, 385],
    [3669, 2223, 1528, 940],
    [2857, 1732, 1190, 732],
    [2085, 1263, 868, 534],
    [1581, 958, 658, 405],
    [3909, 2369, 1628, 1002],
    [3035, 1839, 1264, 778],
    [2181, 1322, 908, 559],
    [1677, 1016, 698, 430],
    [4158, 2520, 1732, 1066],
    [3289, 1994, 1370, 843],
    [2358, 1429, 982, 604],
    [1782, 1080, 742, 457],
    [4417, 2677, 1840, 1132],
    [3486, 2113, 1452, 894],
    [2473, 1499, 1030, 634],
    [1897, 1150, 790, 486],
    [4686, 2840, 1952, 1201],
    [3693, 2238, 1538, 947],
    [2670, 1618, 1112, 684],
    [2022, 1226, 842, 518],
    [4965, 3009, 2068, 1273],
    [3909, 2369, 1628, 1002],
    [2805, 1700, 1168, 719],
    [2157, 1307, 898, 553],
    [5253, 3183, 2188, 1347],
    [4134, 2506, 1722, 1060],
    [2949, 1787, 1228, 756],
    [2301, 1394, 958, 590],
    [5529, 3351, 2303, 1417],
    [4343, 2632, 1809, 1113],
    [3081, 1867, 1283, 790],
    [2361, 1431, 983, 605],
    [5836, 3537, 2431, 1496],
    [4588, 2780, 1911, 1176],
    [3244, 1966, 1351, 832],
    [2524, 1530, 1051, 647],
    [6153, 3729, 2563, 1577],
    [4775, 2894, 1989, 1224],
    [3417, 2071, 1423, 876],
    [2625, 1591, 1093, 673],
    [6479, 3927, 2699, 1661],
    [5039, 3054, 2099, 1292],
    [3599, 2181, 1499, 923],
    [2735, 1658, 1139, 701],
    [6743, 4087, 2809, 1729],
    [5313, 3220, 2213, 1362],
    [3791, 2298, 1579, 972],
    [2927, 1774, 1219, 750],
    [7089, 4296, 2953, 1817],
    [5596, 3391, 2331, 1435],
    [3993, 2420, 1663, 1024],
    [3057, 1852, 1273, 784],
];

//  Data bytes | EC bytes | #Blocks G1 | #Bytes in G1 blocks | #Blocks G2 | #Bytes in G2 blocks | Total
static VERSION_BYTES: [[usize; 7]; 40 * 4] = [
    [19, 7, 1, 19, 0, 0, 19],
    [16, 10, 1, 16, 0, 0, 16],
    [13, 13, 1, 13, 0, 0, 13],
    [9, 17, 1, 9, 0, 0, 9],
    [34, 10, 1, 34, 0, 0, 34],
    [28, 16, 1, 28, 0, 0, 28],
    [22, 22, 1, 22, 0, 0, 22],
    [16, 28, 1, 16, 0, 0, 16],
    [55, 15, 1, 55, 0, 0, 55],
    [44, 26, 1, 44, 0, 0, 44],
    [34, 18, 2, 17, 0, 0, 34],
    [26, 22, 2, 13, 0, 0, 26],
    [80, 20, 1, 80, 0, 0, 80],
    [64, 18, 2, 32, 0, 0, 64],
    [48, 26, 2, 24, 0, 0, 48],
    [36, 16, 4, 9, 0, 0, 36],
    [108, 26, 1, 108, 0, 0, 108],
    [86, 24, 2, 43, 0, 0, 86],
    [62, 18, 2, 15, 2, 16, 62],
    [46, 22, 2, 11, 2, 12, 46],
    [136, 18, 2, 68, 0, 0, 136],
    [108, 16, 4, 27, 0, 0, 108],
    [76, 24, 4, 19, 0, 0, 76],
    [60, 28, 4, 15, 0, 0, 60],
    [156, 20, 2, 78, 0, 0, 156],
    [124, 18, 4, 31, 0, 0, 124],
    [88, 18, 2, 14, 4, 15, 88],
    [66, 26, 4, 13, 1, 14, 66],
    [194, 24, 2, 97, 0, 0, 194],
    [154, 22, 2, 38, 2, 39, 154],
    [110, 22, 4, 18, 2, 19, 110],
    [86, 26, 4, 14, 2, 15, 86],
    [232, 30, 2, 116, 0, 0, 232],
    [182, 22, 3, 36, 2, 37, 182],
    [132, 20, 4, 16, 4, 17, 132],
    [100, 24, 4, 12, 4, 13, 100],
    [274, 18, 2, 68, 2, 69, 274],
    [216, 26, 4, 43, 1, 44, 216],
    [154, 24, 6, 19, 2, 20, 154],
    [122, 28, 6, 15, 2, 16, 122],
    [324, 20, 4, 81, 0, 0, 324],
    [254, 30, 1, 50, 4, 51, 254],
    [180, 28, 4, 22, 4, 23, 180],
    [140, 24, 3, 12, 8, 13, 140],
    [370, 24, 2, 92, 2, 93, 370],
    [290, 22, 6, 36, 2, 37, 290],
    [206, 26, 4, 20, 6, 21, 206],
    [158, 28, 7, 14, 4, 15, 158],
    [428, 26, 4, 107, 0, 0, 428],
    [334, 22, 8, 37, 1, 38, 334],
    [244, 24, 8, 20, 4, 21, 244],
    [180, 22, 12, 11, 4, 12, 180],
    [461, 30, 3, 115, 1, 116, 461],
    [365, 24, 4, 40, 5, 41, 365],
    [261, 20, 11, 16, 5, 17, 261],
    [197, 24, 11, 12, 5, 13, 197],
    [523, 22, 5, 87, 1, 88, 523],
    [415, 24, 5, 41, 5, 42, 415],
    [295, 30, 5, 24, 7, 25, 295],
    [223, 24, 11, 12, 7, 13, 223],
    [589, 24, 5, 98, 1, 99, 589],
    [453, 28, 7, 45, 3, 46, 453],
    [325, 24, 15, 19, 2, 20, 325],
    [253, 30, 3, 15, 13, 16, 253],
    [647, 28, 1, 107, 5, 108, 647],
    [507, 28, 10, 46, 1, 47, 507],
    [367, 28, 1, 22, 15, 23, 367],
    [283, 28, 2, 14, 17, 15, 283],
    [721, 30, 5, 120, 1, 121, 721],
    [563, 26, 9, 43, 4, 44, 563],
    [397, 28, 17, 22, 1, 23, 397],
    [313, 28, 2, 14, 19, 15, 313],
    [795, 28, 3, 113, 4, 114, 795],
    [627, 26, 3, 44, 11, 45, 627],
    [445, 26, 17, 21, 4, 22, 445],
    [341, 26, 9, 13, 16, 14, 341],
    [861, 28, 3, 107, 5, 108, 861],
    [669, 26, 3, 41, 13, 42, 669],
    [485, 30, 15, 24, 5, 25, 485],
    [385, 28, 15, 15, 10, 16, 385],
    [932, 28, 4, 116, 4, 117, 932],
    [714, 26, 17, 42, 0, 0, 714],
    [512, 28, 17, 22, 6, 23, 512],
    [406, 30, 19, 16, 6, 17, 406],
    [1006, 28, 2, 111, 7, 112, 1006],
    [782, 28, 17, 46, 0, 0, 782],
    [568, 30, 7, 24, 16, 25, 568],
    [442, 24, 34, 13, 0, 0, 442],
    [1094, 30, 4, 121, 5, 122, 1094],
    [860, 28, 4, 47, 14, 48, 860],
    [614, 30, 11, 24, 14, 25, 614],
    [464, 30, 16, 15, 14, 16, 464],
    [1174, 30, 6, 117, 4, 118, 1174],
    [914, 28, 6, 45, 14, 46, 914],
    [664, 30, 11, 24, 16, 25, 664],
    [514, 30, 30, 16, 2, 17, 514],
    [1276, 26, 8, 106, 4, 107, 1276],
    [1000, 28, 8, 47, 13, 48, 1000],
    [718, 30, 7, 24, 22, 25, 718],
    [538, 30, 22, 15, 13, 16, 538],
    [1370, 28, 10, 114, 2, 115, 1370],
    [1062, 28, 19, 46, 4, 47, 1062],
    [754, 28, 28, 22, 6, 23, 754],
    [596, 30, 33, 16, 4, 17, 596],
    [1468, 30, 8, 122, 4, 123, 1468],
    [1128, 28, 22, 45, 3, 46, 1128],
    [808, 30, 8, 23, 26, 24, 808],
    [628, 30, 12, 15, 28, 16, 628],
    [1531, 30, 3, 117, 10, 118, 1531],
    [1193, 28, 3, 45, 23, 46, 1193],
    [871, 30, 4, 24, 31, 25, 871],
    [661, 30, 11, 15, 31, 16, 661],
    [1631, 30, 7, 116, 7, 117, 1631],
    [1267, 28, 21, 45, 7, 46, 1267],
    [911, 30, 1, 23, 37, 24, 911],
    [701, 30, 19, 15, 26, 16, 701],
    [1735, 30, 5, 115, 10, 116, 1735],
    [1373, 28, 19, 47, 10, 48, 1373],
    [985, 30, 15, 24, 25, 25, 985],
    [745, 30, 23, 15, 25, 16, 745],
    [1843, 30, 13, 115, 3, 116, 1843],
    [1455, 28, 2, 46, 29, 47, 1455],
    [1033, 30, 42, 24, 1, 25, 1033],
    [793, 30, 23, 15, 28, 16, 793],
    [1955, 30, 17, 115, 0, 0, 1955],
    [1541, 28, 10, 46, 23, 47, 1541],
    [1115, 30, 10, 24, 35, 25, 1115],
    [845, 30, 19, 15, 35, 16, 845],
    [2071, 30, 17, 115, 1, 116, 2071],
    [1631, 28, 14, 46, 21, 47, 1631],
    [1171, 30, 29, 24, 19, 25, 1171],
    [901, 30, 11, 15, 46, 16, 901],
    [2191, 30, 13, 115, 6, 116, 2191],
    [1725, 28, 14, 46, 23, 47, 1725],
    [1231, 30, 44, 24, 7, 25, 1231],
    [961, 30, 59, 16, 1, 17, 961],
    [2306, 30, 12, 121, 7, 122, 2306],
    [1812, 28, 12, 47, 26, 48, 1812],
    [1286, 30, 39, 24, 14, 25, 1286],
    [986, 30, 22, 15, 41, 16, 986],
    [2434, 30, 6, 121, 14, 122, 2434],
    [1914, 28, 6, 47, 34, 48, 1914],
    [1354, 30, 46, 24, 10, 25, 1354],
    [1054, 30, 2, 15, 64, 16, 1054],
    [2566, 30, 17, 122, 4, 123, 2566],
    [1992, 28, 29, 46, 14, 47, 1992],
    [1426, 30, 49, 24, 10, 25, 1426],
    [1096, 30, 24, 15, 46, 16, 1096],
    [2702, 30, 4, 122, 18, 123, 2702],
    [2102, 28, 13, 46, 32, 47, 2102],
    [1502, 30, 48, 24, 14, 25, 1502],
    [1142, 30, 42, 15, 32, 16, 1142],
    [2812, 30, 20, 117, 4, 118, 2812],
    [2216, 28, 40, 47, 7, 48, 2216],
    [1582, 30, 43, 24, 22, 25, 1582],
    [1222, 30, 10, 15, 67, 16, 1222],
    [2956, 30, 19, 118, 6, 119, 2956],
    [2334, 28, 18, 47, 31, 48, 2334],
    [1666, 30, 34, 24, 34, 25, 1666],
    [1276, 30, 20, 15, 61, 16, 1276],
];
